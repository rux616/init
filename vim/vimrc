" Base settings
" -------------
if &compatible
    set nocompatible                    " use Vim settings, rather than Vi settings
endif

silent! while 0                         " if +eval feat is missing above will be skipped
    set nocompatible
silent! endwhile

filetype plugin indent on               " required

if has("nvim")                          " check if running as vim or neovim
    let g:variant = 'nvim'
else
    let g:variant = 'vim'
endif



" Internal functions
" ------------------
function! SourceIfExists(file)
    if filereadable(expand(a:file))
        exe 'source' a:file
    endif
endfunction


" Set up XDG spec compatibility
" -----------------------------
if exists("$XDG_CONFIG_HOME")
    let g:config_home = expand($XDG_CONFIG_HOME)
else
    let g:config_home = expand("~/.config")
endif
if exists("$XDG_DATA_HOME")
    let g:data_home = expand($XDG_DATA_HOME)
else
    let g:data_home = expand("~/.local/share")
endif
let &backupdir = g:data_home.'/'.g:variant.'/backup//'
let &directory = g:data_home.'/'.g:variant.'/swap//'
let &undodir = g:data_home.'/'.g:variant.'/undo//'
let &viewdir = g:data_home.'/'.g:variant.'/view//'
let &viminfo = '''1000,"50,s10,h,n'.g:data_home.'/'.g:variant.'/viminfo'
" vim and neovim are just different enough to make attempting to automagically
" set the runtimepath painful enough that each deserves their own declaration
if has("nvim")
    let &runtimepath = g:config_home.'/nvim,'.g:data_home.'/nvim/site,'.$VIMRUNTIME.','.g:data_home.'/nvim/site/after,'.g:config_home.'/nvim/after'
else
    let &runtimepath = g:config_home.'/vim,'.g:config_home.'/vim/after,'.g:data_home.'/vim,'.g:data_home.'/vim/after,'.$VIM.','.$VIMRUNTIME
endif
let &packpath = &runtimepath


" Plug Options (if they don't make more sense elsewhere)
" ------------
" black
let g:black_virtualenv = g:data_home.'/'.g:variant.'/black'
" vim-terraform
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1


" Set up vim-plug
" ---------------
" Specify a directory for plugins
call plug#begin(expand(g:data_home).'/'.expand(g:variant).'/plugged')

" only install black if system has python3 >= 3.6
if has('python3') && system("python3 -c \"import sys; print(sys.version_info.minor)\"") >= 6
    "Plug 'psf/black', { 'tag': '*' }
    Plug 'psf/black'
    " NOTE: if black is broken, potentially run the following bash commands to fix:
    "   bash
    "   cd $XDG_DATA_HOME/vim/black
    "   source bin/activate
    "   python3 -m pip install --upgrade git+https://github.com/psf/black.git
    " check https://github.com/psf/black/issues/1293 for more info
endif

"Plug 'sjl/badwolf' " waiting on merge from rux616/badwolf.git/folded
Plug 'rux616/badwolf', { 'branch': 'folded' }

Plug 'tpope/vim-fugitive'
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }
Plug 'hashivim/vim-packer', { 'for': 'packer' }
Plug 'pseewald/vim-anyfold'
Plug 'google/vim-jsonnet', { 'for': 'jsonnet' }
Plug 'Yggdroot/indentLine'
Plug 'christoomey/vim-tmux-navigator'
Plug 'airblade/vim-gitgutter'

call plug#end()


" Encoding
" --------
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8


" Colors
" ------
" If term is screen* or alacritty, set true color mode
" (compliments +termguicolors compile-time option)
if &term =~# '^screen' || &term =~# '^alacritty'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:badwolf_darkgutter = 1            " make gutters darker than the background
let g:badwolf_tabline = 2               " make the tab line lighter than the background
let g:badwolf_folded = 0                " make folded lines darker than the background
silent! colorscheme badwolf             " use the 'badwolf' colorscheme


" Spaces and Tabs
" ---------------
set tabstop=2                           " Number of visual spaces per <tab>
set softtabstop=2                       " Number of spaces in <tab> when editing
set shiftwidth=2                        " Number of spaces to use for each step of indenting
set expandtab                           " Turns <tab> into <space>s
set autoindent                          " Autoindents when you create a new line.
" Filetype-specifics
augroup vimrc_filetype
    autocmd!
    autocmd FileType sh setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
    autocmd FileType vim setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
augroup END


" UI Configuration
" ----------------
set ruler                               " show the cursor position at all time
set display=truncate                    " show @@@ in the last line if it is truncated
set showcmd                             " display incomplete commands
set number                              " show line numbers
set cursorline                          " highlight current line
set scrolloff=3                         " show a few lines of context around the cursor
set laststatus=2                        " Force statusline to show
" Build a statusline
let &statusline = '%#PmenuSel#%#LineNr# %F %m %= %y %{&fileencoding?&fileenciding:&encoding}|%{&fileformat} %p%% %l:%c '
" IndentLine
"let g:indentLine_setColors = 0
let g:indentLine_enabled = 1
let g:indentLine_concealcursor = 0
let g:indentLine_char = '│'
let g:indentLine_faster = 1
" powerline symbols for airline
" NOTE: vim-airline is disabled due to not playing nice with tmux+alacritty
"let g:airline_left_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''


" Folding
" -------
augroup vimrc_anyfold
    autocmd!
    autocmd Filetype * AnyFoldActivate  " enable any-fold for all filetypes
augroup END
set foldlevel=99                        " open all folds initially
"set foldenable                          " enable folding
"set foldlevelstart=10                   " open most folds by default
"set foldnestmax=10                      " 10 nested fold max
" space opens/closes folds
nnoremap <space> za


" Movement
" --------
nnoremap k gk
nnoremap j gj
nnoremap <Up> gk
nnoremap <Down> gj

" Functionality
" -------------
syntax on                           " enable syntax highlighting
let c_comment_strings=1             " highlight strings inside C comments
if has("reltime")                   " do incremental searching when it's possible to timeout
    set incsearch
endif
set hlsearch                        " highlight search matches
set timeout                         " timeout for key codes
set timeoutlen=100                  " wait up to 100ms after Est for special key
set wildmenu                        " display completion matches in a status line
set backspace=indent,eol,start      " enable backspace to backspace over things in insert mode
set ttyfast                         " indicates a fast terminal connection
set updatetime=250                  " sets updatetime to 250ms
augroup vimrc_functionality
    autocmd!
    " when editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \   if line("'\"") > 0 && line("'\"") <= line("$") |
    \       exe "normal! g'\"" |
    \   endif

    " remove highlights when entering insert mode or starting vim
    autocmd InsertEnter,VimEnter * noh
augroup END
if has ("cscope") && filereadable("/usr/bin/cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set nocsverb
    if filereadable("cscope.out")     " add any database in current directory
        cs add $PWD/cscope.out
    elseif $CSCOPE_DB != ""           " else add database pointed to be environment
        cs add $CSCOPE_DB
    endif
    set csverb
endif
" Convenience command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
    \   | wincmd p | diffthis
endif
" convenience command to remove trailing whitespace
if !exists(":FixWhitespace")
    command FixWhitespace :%s/\s\+$//e
endif
if has("langmap") && exists("+langremap")
    set nolangremap
endif
" don't wake up system with blinking cursor
let &guicursor = &guicursor . ",a:blinkon0"
function FormatJson()
    %!jq '.'
endfunction
function SortJson()
    %!jq -S 'def sorted_walk(f): . as $in | if type=="object" then reduce keys[] as $key ( {}; . + { ($key): ($in[$key] | sorted_walk(f)) } ) | f elif type == "array" then map( sorted_walk(f) ) | f else f end; def normalize: sorted_walk(if type == "array" then sort else. end); normalize'
endfunction
" copy to attached terminal using the yank(1) script:
" https://github.com/sunaku/home/blob/master/bin/yank
function! Yank(text) abort
    let escape = system('yank', a:text)
    if v:shell_error
        echoerr escape
    else
        call writefile([escape], '/dev/tty', 'b')
    endif
endfunction
function! CopyYank() abort
    call Yank(join(v:event.regcontents, "\n"))
endfunction
augroup vimrc_yank
    autocmd!
    autocmd TextYankPost * call CopyYank()
augroup END


" Abbreviations
" -------------
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" various 'on file write' commands
augroup vimrc_on_file_write
    autocmd!
    autocmd BufWritePre * FixWhitespace
    autocmd FileType python autocmd BufWritePre <buffer> Black
augroup END


" Security
" --------
if v:version < 801 || !has("patch-8.1.1365")    " check if vim is < v8.1.1365
    set nomodeline                              " disable modeline capability for security purposes
endif                                           " see https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md for more info


" Keymaps
" -------
" shift/ctrl/alt translations from terminal escape sequences to vim maps
map <ESC>[1;2A <S-Up>
map <ESC>[1;2B <S-Down>
map <ESC>[1;2C <S-Right>
map <ESC>[1;2D <S-Left>
map <ESC>[1;3A <M-Up>
map <ESC>[1;3B <M-Down>
map <ESC>[1;3C <M-Right>
map <ESC>[1;3D <M-Left>
map <ESC>[1;4A <S-M-Up>
map <ESC>[1;4B <S-M-Down>
map <ESC>[1;4C <S-M-Right>
map <ESC>[1;4D <S-M-Left>
map <ESC>[1;5A <C-Up>
map <ESC>[1;5B <C-Down>
map <ESC>[1;5C <C-Right>
map <ESC>[1;5D <C-Left>
map <ESC>[1;6A <C-S-Up>
map <ESC>[1;6B <C-S-Down>
map <ESC>[1;6C <C-S-Right>
map <ESC>[1;6D <C-S-Left>
map <ESC>[1;7A <C-M-Up>
map <ESC>[1;7B <C-M-Down>
map <ESC>[1;7C <C-M-Right>
map <ESC>[1;7D <C-M-Left>
map <ESC>[1;8A <C-S-M-Up>
map <ESC>[1;8B <C-S-M-Down>
map <ESC>[1;8C <C-S-M-Right>
map <ESC>[1;8D <C-S-M-Left>
map <ESC>l <M-l>
map! <ESC>[1;2A <S-Up>
map! <ESC>[1;2B <S-Down>
map! <ESC>[1;2C <S-Right>
map! <ESC>[1;2D <S-Left>
map! <ESC>[1;3A <M-Up>
map! <ESC>[1;3B <M-Down>
map! <ESC>[1;3C <M-Right>
map! <ESC>[1;3D <M-Left>
map! <ESC>[1;4A <S-M-Up>
map! <ESC>[1;4B <S-M-Down>
map! <ESC>[1;4C <S-M-Right>
map! <ESC>[1;4D <S-M-Left>
map! <ESC>[1;5A <C-Up>
map! <ESC>[1;5B <C-Down>
map! <ESC>[1;5C <C-Right>
map! <ESC>[1;5D <C-Left>
map! <ESC>[1;6A <C-S-Up>
map! <ESC>[1;6B <C-S-Down>
map! <ESC>[1;6C <C-S-Right>
map! <ESC>[1;6D <C-S-Left>
map! <ESC>[1;7A <C-M-Up>
map! <ESC>[1;7B <C-M-Down>
map! <ESC>[1;7C <C-M-Right>
map! <ESC>[1;7D <C-M-Left>
map! <ESC>[1;8A <C-S-M-Up>
map! <ESC>[1;8B <C-S-M-Down>
map! <ESC>[1;8C <C-S-M-Right>
map! <ESC>[1;8D <C-S-M-Left>
map! <ESC>[3;5~ <C-Del>
map! <ESC>l <M-l>
" Adds some GUI-centric keymaps for moving to next/previous word
map <C-Left> b
map <C-S-Left> B
map <C-Right> w
map <C-S-Right> W
" vmap for maintaining visual mode after shifting > and <
vmap < <gv
vmap > >gv
" backspace a word
inoremap <C-h> <C-\><C-o>db
cnoremap <C-h> <C-w>
" del a word
inoremap <C-Del> <C-\><C-o>dw
" make shift-{up,down,left,right} moving only one space
map <S-Up> <Up>
map! <S-Up> <Up>
map <S-Down> <Down>
map! <S-Down> <Down>
map <S-Left> <Left>
map! <S-Left> <Left>
map <S-Right> <Right>
map! <S-Right> <Right>
" vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <M-l> :TmuxNavigatePrevious<cr>


" Local Files
" -----------
call SourceIfExists(".vimrc.local")             " enable project-specific .vimrc files
