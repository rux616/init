#!/usr/bin/env bash
set -ex

install_subdir="${HOME}/.local"
bin_subdir="${install_subdir}/bin"
lib_subdir="${install_subdir}/lib"
opt_subdir="${install_subdir}/opt"
share_subdir="${install_subdir}/share"
completions_subdir="${share_subdir}/bash-completion/completions"

if command -v apt-get &>/dev/null; then
    family="deb"
    pkg_mgr="sudo apt-get"
elif command -v dnf &>/dev/null; then
    family="rpm"
    pkg_mgr="sudo dnf"
else
    echo "unknown linux family"
    exit 1
fi

# make temp directory
temp_dir="$(mktemp -d)"
cd "${temp_dir}"

for profile in $@; do
    case ${profile} in
        all | home | work | packages )
            # install packages
            echo "installing packages..."
            mkdir "packages" && cd "packages"
            case ${family} in
                deb) ${pkg_mgr} update ;;
                rpm) ${pkg_mgr} makecache ;;
            esac
            packages_common=( git vim curl wget tmux python3 python3-pip unzip sysstat pkg-config htop bash-completion )
            packages_deb=( apt-file python3-venv )
            packages_rpm=()
            packages=( ${packages_common[@]} )
            case ${family} in
                deb) packages+=( ${packages_deb[@]} ) ;;
                rpm) packages+=( ${packages_rpm[@]} ) ;;
            esac
            ${pkg_mgr} install -y ${packages[@]}
            cd "${temp_dir}"
            ;;&
        all | work | gcloud )
            # install gcloud
            echo "installing gcloud..."
            mkdir "gcloud" && cd "gcloud"
            curl -sLo "gcloud_install.sh" "https://sdk.cloud.google.com/"
            ./gcloud_install.sh --disable-prompts --install-dir="${opt_subdir}"
            ${opt_subdir}/google-cloud-sdk/bin/gcloud -q components install alpha beta cloud_sql_proxy kubectl
            ln -sf "${opt_subdir}/google-cloud-sdk/bin/gcloud" "${bin_subdir}/gcloud"
            ln -sf "${opt_subdir}/google-cloud-sdk/bin/gsutil" "${bin_subdir}/gsutil"
            ln -sf "${opt_subdir}/google-cloud-sdk/bin/cloud_sql_proxy" "${bin_subdir}/cloud_sql_proxy"
            ln -sf "${opt_subdir}/google-cloud-sdk/completions.bash.inc" "${completions_subdir}/gcloud_bq_gsutil"
            cd "${temp_dir}"
            ;;&
        all | work | kubectl )
            # install kubectl
            echo "installing kubectl..."
            mkdir "kubectl" && cd "kubectl"
            curl -sLO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod ugo+x kubectl
            mv -f kubectl ${bin_subdir}/kubectl #overwrite any existing binaries
            ${bin_subdir}/kubectl completions bash >${completions_subdir}/kubectl
            cd "${temp_dir}"
            ;;&
        all | work | terraform )
            # install terraform
            echo "installing terraform..."
            mkdir "terraform" && cd "terraform"
            # first delete old versions
            rm ${bin_subdir}/terraform*
            # put version to be referred to as 'terraform' last
            versions=( "0.11.14" "0.12.12" )
            for version in "${versions[@]}"; do
                curl -s -O "https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip"
                unzip *
                rm "terraform_${version}_linux_amd64.zip"
                mv terraform "${bin_subdir}/terraform-${version}"
            done
            ln -s "${bin_subdir}/terraform-${version}" "${bin_subdir}/terraform"
            cd "${temp_dir}"
            ;;&
        all | home | work | packer )
            # install packer
            echo "installing packer..."
            mkdir "packer" && cd "packer"
            # first delete old versions
            rm ${bin_subdir}/packer*
            # put version to be referred to as 'packer' last
            versions=( "1.5.5" )
            for tf_version in "${versions[@]}"; do
                curl -s -O "https://releases.hashicorp.com/packer/${version}/packer_${version}_linux_amd64.zip"
                unzip *
                rm "packer_${version}_linux_amd64.zip"
                mv terraform "${bin_subdir}/packer-${version}"
            done
            ln -s "${bin_subdir}/packer-${version}" "${bin_subdir}/packer"
            cd "${temp_dir}"
            ;;&
        all | home | work | keybase )
            # install keybase
            echo "installing keybase..."
            mkdir "keybase" && cd "keybase"
            if ! command -v keybase &>/dev/null; then
                case ${family} in
                    deb) keybase_file="keybase_amd64.deb" ;;
                    rpm) keybase_file="keybase_amd64.rpm" ;;
                esac
                curl -so "${tmpdir}/${keybase_file}" "https://prerelease.keybase.io/${keybase_file}"
                ${pkg_mgr} install -y "${tmpdir}/${keybase_file}"
                run_keybase -g
            fi
            cd "${temp_dir}"
            ;;&
        all | home | work | pre-commit )
            # install pre-commit
            echo "installing pre-commit..."
            mkdir "pre-commit" && cd "pre-commit"
            python3 -m pip install --user pre-commit
            cd "${temp_dir}"
            ;;&
        all | home | work | ssh-config )
            # install basic ssh-config
            echo "installing basic ssh config..."
            mkdir "ssh-config" && cd "ssh-config"
            if [[ ! -f "${HOME}/.ssh/config" ]]; then
                cat >"${HOME}/.ssh/config" << EOL
Host *
    CanonicalizeHostname yes
    PreferredAuthentications publickey
    ServerAliveInterval 60

Host github.com
    IdentityFile ~/.ssh/${HOSTNAME}-to-github
    User rux616
EOL
            cd "${temp_dir}"
            fi
            ;;&
        all | home | work | ssh-keys )
            # create some basic ssh keys
            echo "creating basic ssh keys..."
            mkdir "ssh-keys" && cd "ssh-keys"
            names=( "${HOSTNAME}-to-github" )
            types=( "ed25519" )
            for ((i=0; i<${#names[@]}; i++)); do
                if [[ ! -f "${HOME}/.ssh/${names[$i]}" ]]; then
                    ssh-keygen -q -t ${types[$i]} -C "${USER}@${names[$i]}" -N "" -f "${HOME}/.ssh/${names[$i]}"
                fi
            done
            cd "${temp_dir}"
            ;;&
        all | home | work | util-linux )
            # install the *full* util-linux, which some distros don't seem to have
            section="util-linux"
            echo "installing ${section}..."
            mkdir "${section}" && cd "${section}"
            prereqs_common=( autoconf bison libtool automake )
            prereqs_deb=( autopoint libncurses-dev )
            prereqs_rpm=( gettext-devel ncurses-devel )
            prereqs=( ${prereqs_common[@]} )
            case ${family} in
                deb) prereqs+=( ${prereqs_deb[@]} ) ;;
                rpm) prereqs+=( ${prereqs_rpm[@]} ) ;;
            esac
            ${pkg_mgr} install -y ${prereqs[@]}
            latest_tarball="$(curl -sN "https://api.github.com/repos/karelzak/util-linux/tags" | grep -Pom 1 '"tarball_url": "\K.*?(?=")')"
            curl -sLo "${section}.tar.gz" "${latest_tarball}" && \
                tar -xf "${section}.tar.gz" --strip 1 && \
                ./autogen.sh && \
                ./configure --prefix="${install_subdir}" && \
                make && \
                sudo make install && \
                sudo chown -R ${USER}:${USER} "${install_subdir}"
            cd "${temp_dir}"
            ;;&
        all | home | work | tmux )
            # install tmux
            section="tmux"
            echo "installing ${section}..."
            mkdir "${section}" && cd "${section}"
            prereqs_common=( autoconf bison libtool automake )
            prereqs_deb=( autopoint libncurses-dev libevent-dev )
            prereqs_rpm=( gettext-devel ncurses-devel libevent-devel )
            prereqs=( ${prereqs_common[@]} )
            case ${family} in
                deb) prereqs+=( ${prereqs_deb[@]} ) ;;
                rpm) prereqs+=( ${prereqs_rpm[@]} ) ;;
            esac
            ${pkg_mgr} install -y ${prereqs[@]}
            latest_tarball="$(curl -sN "https://api.github.com/repos/tmux/tmux/releases/latest" | grep -Pom 1 '"tarball_url": "\K.*?(?=")')"
            curl -sLo "${section}.tar.gz" "${latest_tarball}" && \
                tar -xf "${section}.tar.gz" --strip 1 && \
                ./autogen.sh && \
                ./configure --prefix="${install_subdir}" && \
                make && \
                make install
            cd "${temp_dir}"
            ;;&
    esac
done

# cleanup
rm -rf "${temp_dir}"
