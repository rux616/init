#!/usr/bin/env bash
# bashrc

# ------------ #
# Secure umask #
# ------------ #

umask 0077



# -------------------- #
# Load Global Settings #
# -------------------- #

if [[ -f "/etc/bashrc" ]]; then
    source "/etc/bashrc"
fi



# ------------ #
# XDG Settings #
# ------------ #

export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.data"
export XDG_CACHE_HOME="${HOME}/.cache"



# ----------- #
# Load ble.sh #
# ----------- #

if [[ $- == *i* && -f "${XDG_DATA_HOME}/blesh/ble.sh" ]]; then
    # ble.sh has issues with the alacritty terminal profile. not sure if it's on alacritty's side
    # or ble.sh's side, but alacritty seems to work decently with the xterm-256color profile, so
    # setting that in the meantime
    [[ $TERM == alacritty ]] && export TERM=xterm-256color
    source "${XDG_DATA_HOME}/blesh/ble.sh"
fi



# -------------- #
# *PATH Settings #
# -------------- #

export MANPATH="${HOME}/.local/share/man:/usr/share/man${MANPATH:+":${MANPATH}"}"
export PATH="${HOME}/.local/sbin:${HOME}/.local/bin${PATH:+":${PATH}"}"

# if Rust is installed, add it to the path
if [[ -e "${HOME}/.cargo/bin/rustc" ]]; then
    export PATH="${HOME}/.cargo/bin${PATH:+":${PATH}"}"
fi

# if go is installed, add the gopath bin directory to PATH
if command -v go &>/dev/null && [[ -e "$(go env GOPATH)" ]]; then
    export PATH="$(go env GOPATH)/bin${PATH:+":${PATH}"}"
fi



# ------------------- #
# Load BASH Functions #
# ------------------- #

if [[ -r "${XDG_CONFIG_HOME}/bash/functions" ]]; then
    source "${XDG_CONFIG_HOME}/bash/functions"
fi



# -------- #
# Globbing #
# -------- #

# enable extended globbing by default
shopt -s extglob

# enable ** globbing by default
shopt -s globstar



# ----------------------- #
# Various Config Settings #
# ----------------------- #

#readline
export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"
#bash_completion
export BASH_COMPLETION_USER_FILE="${XDG_CONFIG_HOME}/bash-completion/bash_completion"
#tmux
if command -v tmux &>/dev/null; then
    if [[ -n "${XDG_RUNTIME_DIR}" ]]; then
        mkdir -p "${XDG_RUNTIME_DIR}/tmux"
        export TMUX_TEMPDIR="${XDG_RUNTIME_DIR}/tmux"
    fi
fi
#wget
if command -v wget &>/dev/null; then
    [[ ! -d "${XDG_CONFIG_HOME}/wget" ]] && mkdir -p "${XDG_CONFIG_HOME}/wget"
    [[ ! -e "${XDG_CONFIG_HOME}/wget/wgetrc" ]] && touch "${XDG_CONFIG_HOME}/wget/wgetrc"
    export WGETRC="${XDG_CONFIG_HOME}/wget/wgetrc"
fi
#ncurses
export TERMINFO="${XDG_DATA_HOME}/terminfo"
export TERMINFO_DIRS="${XDG_DATA_HOME}/terminfo:/usr/share/terminfo"
#less
if command -v less &>/dev/null; then
    mkdir -p "${XDG_DATA_HOME}/less"
    export LESS="-MNR"
    export LESSKEY="${XDG_CONFIG_HOME}/less/lesskey"
    export LESSHISTFILE="${XDG_DATA_HOME}/less/history"
fi
#gnupg
if command -v gpg &>/dev/null; then
    export GNUPGHOME="${XDG_DATA_HOME}/gnupg"
fi
#docker
if command -v docker &>/dev/null; then
    export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"
    export DOCKER_BUILDKIT=1
    # check if running in a WSL2 environment and systemd is NOT enabled
    if $(uname -r | grep -iq "microsoft") && ! $(grep -siq "^systemd *= *true$" "/etc/wsl.conf"); then
        DOCKER_DISTRO="${WSL_DISTRO_NAME}"
        DOCKER_DIR="/mnt/wsl/shared-docker"
        DOCKER_SOCK="${DOCKER_DIR}/docker.sock"
        export DOCKER_HOST="unix://${DOCKER_SOCK}"
        if [[ ! -S "${DOCKER_SOCK}" ]]; then
            mkdir -pm o=,ug=rwx "${DOCKER_DIR}"
            if [[ "$(stat --printf='%G' "${DOCKER_DIR}")" != "docker" ]]; then
                sudo chgrp docker "${DOCKER_DIR}"
            fi
            /mnt/c/Windows/System32/wsl.exe -d "${DOCKER_DISTRO}" sh -c "nohup sudo -b dockerd </dev/null >\"${DOCKER_DIR}/dockerd.log\" 2>&1"
        fi
    fi
fi
#vim
if command -v vim &>/dev/null; then
    export VIMINIT=":source ${XDG_CONFIG_HOME}/vim/vimrc"
fi
#go
if command -v go &>/dev/null; then
    export GOBIN="${HOME}/.local/bin"
    export GOPATH="${XDG_DATA_HOME}/go"
fi
#terraform
if command -v terraform &>/dev/null; then
    mkdir -p "${XDG_CACHE_HOME}/terraform"
    export TF_PLUGIN_CACHE_DIR="${XDG_CACHE_HOME}/terraform"
fi
#krew
export KREW_ROOT="${XDG_DATA_HOME}/krew"
#aws
if command -v aws &>/dev/null; then
    mkdir -p "${XDG_CONFIG_HOME}/aws" "${XDG_DATA_HOME}/aws"
    export AWS_CONFIG_FILE="${XDG_CONFIG_HOME}/aws/config"
    export AWS_SHARED_CREDENTIALS_FILE="${XDG_DATA_HOME}/aws/credentials"
fi
#aws-sso
if command -v aws-sso &>/dev/null; then
    mkdir -p "${XDG_CONFIG_HOME}/aws-sso"
    export AWS_SSO_CONFIG="${XDG_CONFIG_HOME}/aws-sso/config.yaml"
fi
#packer
if command -v packer &>/dev/null; then
    mkdir -p "${XDG_CACHE_HOME}/packer" "${XDG_CONFIG_HOME}/packer" "${XDG_DATA_HOME}/packer"
    export PACKER_CACHE_DIR="${XDG_CACHE_HOME}/packer"
    export PACKER_CONFIG_DIR="${XDG_CONFIG_HOME}/packer"
    export PACKER_HOME_DIR="${XDG_DATA_HOME}/packer"
    export PACKER_LOG_PATH="${XDG_DATA_HOME}/packer/packer.log"
fi
#bat
if command -v bat &>/dev/null; then
    export BAT_PAGER="less -MnR"
fi
#man
if command -v man &>/dev/null; then
    export MANPAGER="less -MnR"
fi



# -------------------- #
# OS-specific Settings #
# -------------------- #

if [[ "$(uname)" == "Darwin" ]]; then
    # Mac OS
    # : # dummy line to make bash stop complaining
    git_prompt_sh_location="/usr/local/etc/bash_completion.d/git-prompt.sh"
elif [[ "$(uname)" == "Linux" ]]; then
    # Linux
    # : # dummy line to make bash stop complaining

    # Determine what flavor of Linux is installed
    flavor="$(awk -F '=' '$1=="ID" { print $2 ;}' "/etc/os-release" | sed -e 's/"//g')"
    case ${flavor} in
        rhel | centos | fedora | amzn )
            git_prompt_sh_location="/usr/share/git-core/contrib/completion/git-prompt.sh"
            ;;
        debian | ubuntu )
            git_prompt_sh_location="/usr/lib/git-core/git-sh-prompt"
            ;;
        *)
            git_prompt_sh_location="/dev/null/git-prompt.sh"
            ;;
    esac
    if $(grep -q -i "microsoft" "/proc/version"); then
        export IS_WSL=true
    else
        export IS_WSL=false
    fi
elif [[ "$(uname)" == "FreeBSD" ]]; then
    # FreeBSD
    # : # dummy line to make bash stop complaining
    git_prompt_sh_location="/usr/local/share/git-core/contrib/completion/git-prompt.sh"
fi



# ----------------------- #
# Cloud-specific Settings #
# ----------------------- #

# Check to see if this is running on any cloud instances. If it is, there may be some one-time initializations to perform.
if timeout 0.25 nslookup metadata.google.internal &>/dev/null; then
    # GCP
    gce_id="${XDG_CACHE_HOME}/bash/gce_id"
    # Get the ID of the current instance, and the previous (or same) one if there.
    current_id="$(curl -s 'https://metadata.google.internal/computeMetadata/v1/instance/id' -H 'Metadata-Flavor: Google')"
    stored_id="$(cat "${gce_id}" 2>/dev/null)"

    # If the IDs are different, perform any of the one-time steps.
    if [[ "${current_id}" != "${stored_id}" ]]; then
        echo "${current_id}" > "${gce_id}"
    fi
fi



# --------------- #
# Local or Remote #
# --------------- #

if [[ -e "${XDG_CONFIG_HOME}/bash/localsystem" ]]; then
    export SESSION_TYPE="local"
elif [[ -n "${SSH_TTY}" || -n "${SSH_CLIENT}" ]]; then
    export SESSION_TYPE="remote/ssh"
else
    case $(ps -o comm= -p $PPID) in
        sshd|*/sshd) export SESSION_TYPE="remote/ssh" ;;
        *)           export SESSION_TYPE="local"      ;;
    esac
fi



# -------------- #
# Command Prompt #
# -------------- #

# Source the terminal control file to make things easier in terms of colors.
source "${XDG_CONFIG_HOME}/bash/terminal-control"

# Set color of the \u@\h section of the prompt command based on whether the system is local or not
if [[ "${SESSION_TYPE}" == "local" ]]; then
    SYSTEM_COLOR="${Green}"
elif [[ "${SESSION_TYPE}" == "remote/ssh" ]]; then
    SYSTEM_COLOR="${Red}"
fi

# Prepare to include the git prompt.
if [[ -r ${git_prompt_sh_location} ]]; then
    # Declare different variables that control what the git-prompt shows
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_SHOWSTASHSTATE=true
    GIT_PS1_SHOWUNTRACKEDFILES=true
    GIT_PS1_SHOWUPSTREAM="auto"
    GIT_PS1_HIDE_IF_PWD_IGNORED=true
    GIT_PS1_SHOWCOLORHINTS=true

    # Source the git-prompt helper script
    source ${git_prompt_sh_location}

    # Set the command prompt to execute __git_ps1 with it taking the custom command prompt strings as arguments.
    export PROMPT_COMMAND="__git_ps1 \"${RESET_LINE}${Rst}${IYellow}["'$(date +"%F %T") UTC$(tz_trimmed)'"]${Rst} ${SYSTEM_COLOR}\u@\h${Rst}:${Bold}${Blue}\w${Rst}\" \"\$(kcc PS1)\n\$ \""
else
    # If the git prompt is not found for whatever reason, go with the basic command prompt.
    export PS1="${RESET_LINE}${Rst}${IYellow}["'$(date +"%F %T") UTC$(tz_trimmed)'"]${Rst} ${SYSTEM_COLOR}\u@\h${Rst}:${Bold}${Blue}\w${Rst}"'$(kcc PS1)'"\n\$ "
fi

# activate command completion for the AWS CLI if the completer command is installed
aws_completer_command="$(command -v aws_completer)" && complete -C "${aws_completer_command}" aws

# enable system-level bash-completion
if [[ -f "/etc/bash_completion" ]]; then
    source "/etc/bash_completion"
elif [[ -f "/usr/share/bash-completion/bash_completion" ]]; then
    source "/usr/share/bash-completion/bash_completion"
fi



# ---------------------- #
# Debug Trace Log Format #
# ---------------------- #

export PS4='# ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]}() - [${SHLVL},${BASH_SUBSHELL},$?] '



# ---------------- #
# History Settings #
# ---------------- #

# Set history file to be different than default to avoid accidental overwrites
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE="${XDG_DATA_HOME}/bash/history"

# Set timestamp format
export HISTTIMEFORMAT="[%F %T]  "

# Avoid duplicates
export HISTCONTROL=ignoredups

# Unlimited history
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTSIZE=
export HISTFILESIZE=

# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend

# After each command, append to the history file and reread it
# http://superuser.com/questions/20900/bash-history-loss
((_ble_bash)) || export PROMPT_COMMAND="${PROMPT_COMMAND:+"${PROMPT_COMMAND}; "}history -a; history -c; history -r"



# ------------------ #
# Set Default Editor #
# ------------------ #

export VISUAL=vim
export EDITOR=$VISUAL



# ------------------------ #
# Load Local BASH Settings #
# ------------------------ #

if [[ -r "${XDG_CONFIG_HOME}/bash/local" ]]; then
    source "${XDG_CONFIG_HOME}/bash/local"
fi



# ----------------- #
# Load BASH Aliases #
# ----------------- #

if [[ -r "${XDG_CONFIG_HOME}/bash/aliases" ]]; then
    source "${XDG_CONFIG_HOME}/bash/aliases"
fi



# ------------------- #
# Late *PATH Settings #
# ------------------- #

export PATH="${KREW_ROOT:-${HOME}/.krew}/bin:${PATH}"



# --------------- #
# Activate ble.sh #
# --------------- #

[[ ${BLE_VERSION-} ]] && ble-attach
[[ ${BLE_VERSION-} && ! ${TMUX} ]] && ble-reload



# ----- #
# Conda #
# ----- #

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/dan/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/dan/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/dan/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/dan/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

