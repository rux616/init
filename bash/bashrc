#!/usr/bin/env bash
# bashrc

# -------------------- #
# Load Global Settings #
# -------------------- #

if [[ -f "/etc/bashrc" ]]; then
    source "/etc/bashrc"
fi



# ------------ #
# XDG Settings #
# ------------ #

export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.data"
export XDG_CACHE_HOME="${HOME}/.cache"



# ----------------------- #
# Various Config Settings #
# ----------------------- #

#readline
export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"
#tmux
if command -v tmux &>/dev/null; then
    if [[ -n "${XDG_RUNTIME_DIR}" ]]; then
        mkdir "${XDG_RUNTIME_DIR}/tmux"
        export TMUX_TEMPDIR="${XDG_RUNTIME_DIR}/tmux"
    fi
fi
#wget
if command -v wget &>/dev/null; then
    export WGETRC="${XDG_CONFIG_HOME}/wget/wgetrc"
fi
#ncurses
export TERMINFO="${XDG_DATA_HOME}/terminfo"
export TERMINFO_DIRS="${XDG_DATA_HOME}/terminfo:/usr/share/terminfo"
#less
if command -v less &>/dev/null; then
    mkdir -p "${XDG_CACHE_HOME}/less"
    export LESSKEY="${XDG_CONFIG_HOME}/less/lesskey"
    export LESSHISTFILE="${XDG_CACHE_HOME}/less/history"
fi
#gnupg
if command -v gpg &>/dev/null; then
    export GNUPGHOME="${XDG_DATA_HOME}/gnupg"
fi
#docker
if command -v docker &>/dev/null; then
    export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"
fi
#vim
if command -v vim &>/dev/null; then
    export VIMINIT=":source ${XDG_CONFIG_HOME}/vim/vimrc"
fi



# -------------------- #
# OS-specific Settings #
# -------------------- #

if [[ "$(uname)" == "Darwin" ]]; then
    # Mac OS
    # uname >/dev/null   # dummy line to make bash stop complaining
    git_prompt_sh_location="/usr/local/etc/bash_completion.d/git-prompt.sh"
elif [[ "$(uname)" == "Linux" ]]; then
    # Linux
    # uname >/dev/null   # dummy line to make bash stop complaining

    # Determine what flavor of Linux is installed
    flavor="$(awk -F '=' '$1=="ID" { print $2 ;}' "/etc/os-release" | sed -e 's/"//g')"
    case ${flavor} in
        rhel | centos | fedora | amzn )
            git_prompt_sh_location="/usr/share/git-core/contrib/completion/git-prompt.sh"
            ;;
        debian | ubuntu )
            git_prompt_sh_location="/usr/lib/git-core/git-sh-prompt"
            ;;
        *)
            git_prompt_sh_location="/dev/null/git-prompt.sh"
            ;;
    esac
elif [[ "$(uname)" == "FreeBSD" ]]; then
    # FreeBSD
    # uname >/dev/null   # dummy line to make bash stop complaining
    git_prompt_sh_location="/usr/local/share/git-core/contrib/completion/git-prompt.sh"
fi



# ----------------------- #
# Cloud-specific Settings #
# ----------------------- #

# Check to see if this is running on any cloud instances. If it is, there may be some one-time initializations to perform.
if nslookup metadata.google.internal &>/dev/null; then
    # GCP
    gce_id="${XDG_CACHE_HOME:-"${HOME}/.cache"}/bash/gce_id"
    # Get the ID of the current instance, and the previous (or same) one if there.
    current_id="$(curl -s 'https://metadata.google.internal/computeMetadata/v1/instance/id' -H 'Metadata-Flavor: Google')"
    stored_id="$(cat "${gce_id}" 2>/dev/null)"

    # If the IDs are different, perform any of the one-time steps.
    if [[ "${current_id}" != "${stored_id}" ]]; then
        echo "${current_id}" > "${gce_id}"
    fi
fi



# ---------------- #
# Global Functions #
# ---------------- #

tz_trimmed() {
    # Trim the basic date "%z" timezone string because FreeBSD doesn't have the "%:::z" format string
    tz=$(date +%z)
    if [[ "${tz:3}" == "00" ]]; then
        echo ${tz:0:3}
    else
        echo ${tz}
    fi
}

tf_enable() {
    # Remove ".disabled" suffix from passed terraform files (*.tf, *.tfvars)
    for file in $@; do
        [[ "${file}" =~ ^.*\.tf.disabled$ || "${file}" =~ ^.*\.tfvars.disabled$ ]] || continue
        mv -i "${file}" "${file/%.disabled/}"
    done
}

tf_disable() {
    # Add ".disabled" suffix to passed terraform files (*.tf, *.tfvars)
    for file in $@; do
        [[ "${file}" =~ ^.*\.tf$ || "${file}" =~ ^.*\.tfvars$ ]] || continue
        mv -i "${file}" "${file}.disabled"
    done
}



# -------------- #
# Command Prompt #
# -------------- #

# Source the terminal control file to make things easier in terms of colors.
source "${XDG_CONFIG_HOME:-"${HOME}/.config"}/bash/terminal-control"

# Set color of the \u@\h section of the prompt command based on whether the system is local or not - must be set manually by running 'touch ~/.localsystem'
SYSTEM_COLOR="${Red}"
if [[ -e "${XDG_CONFIG_HOME:-"${HOME}/.config"}/bash/localsystem" ]]; then
    SYSTEM_COLOR="${Green}"
fi

# Prepare to include the git prompt.
if [[ -r ${git_prompt_sh_location} ]]; then
    # Declare different variables that control what the git-prompt shows
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_SHOWSTASHSTATE=true
    GIT_PS1_SHOWUNTRACKEDFILES=true
    GIT_PS1_SHOWUPSTREAM="auto"
    GIT_PS1_HIDE_IF_PWD_IGNORED=true
    GIT_PS1_SHOWCOLORHINTS=true

    # Source the git-prompt helper script
    source ${git_prompt_sh_location}
    
    # Set the command prompt to execute __git_ps1 with it taking the custom command prompt strings as arguments. 
    export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}__git_ps1 \"${RESET_LINE}${Rst}${IYellow}["'$(date +"%F %T") UTC$(tz_trimmed)'"]${Rst} ${Bold}${SYSTEM_COLOR}\u@\h${Rst}:${Bold}${Blue}\w${Rst}\" \"\n\$ \""
else
    # If the git prompt is not found for whatever reason, go with the basic command prompt.
    export PS1="${RESET_LINE}${Rst}${IYellow}["'$(date +"%F %T") UTC$(tz_trimmed)'"]${Rst} ${Bold}${SYSTEM_COLOR}\u@\h${Rst}:${Bold}${Blue}\w${Rst}\n\$ "
fi

# activate command completion for the AWS CLI if the completer command is installed
aws_completer_command="$(command -v aws_completer)" && complete -C "${aws_completer_command}" aws

# enable system-level bash-completion
if [[ -f "/usr/share/bash-completion/bash-completion" ]]; then
    source "/usr/share/bash-completion/bash_completion"
elif [[ -f "/etc/bash-completion" ]]; then
    source "/etc/bash_completion"
fi



# ---------------- #
# History Settings #
# ---------------- #

# Set history file to be different than default to avoid accidental overwrites
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE="${XDG_CONFIG_HOME:-"${HOME}/.config"}/bash/history"

# Set timestamp format
export HISTTIMEFORMAT="[%F %T]  "

# Avoid duplicates
export HISTCONTROL=ignoredups:erasedups

# Unlimited history
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTSIZE=
export HISTFILESIZE=

# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend

# After each command, append to the history file and reread it
# http://superuser.com/questions/20900/bash-history-loss
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"



# ------------------ #
# Set Default Editor #
# ------------------ #

export VISUAL=vim
export EDITOR=$VISUAL



# -------------- #
# *PATH Settings #
# -------------- #

export MANPATH="${HOME}/.local/share/man${MANPATH:+":${MANPATH}"}"
export PATH="${HOME}/.local/sbin:${HOME}/.local/bin${PATH:+":${PATH}"}"


# ------------------------ #
# Load Local BASH Settings #
# ------------------------ #

if [[ -r "${XDG_CONFIG_HOME:-"${HOME}/.config"}/bash/local" ]]; then
    source "${XDG_CONFIG_HOME:-"${HOME}/.config"}/bash/local"
fi



# ----------------- #
# Load BASH Aliases #
# ----------------- #

if [[ -r "${XDG_CONFIG_HOME:-"${HOME}/.config"}/bash/aliases" ]]; then
    source "${XDG_CONFIG_HOME:-"${HOME}/.config"}/bash/aliases"
fi

