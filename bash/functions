#!/usr/bin/env bash
# functions

# --------- #
# Functions #
# --------- #

# remember to use "builtin cd ..." to avoid infinite recursion (followed by a segfault)
function cd() {
    # if more than 1 argument (using options) or if `dirname` can't be found, dump right into cd
    if [[ ${#} -ne 1 || -z $(command -v dirname) ]]; then
        builtin cd "${@}"
    else
        local dir="${1}"
        # check if user wants to go up to git repo root
        if [[ ${dir} =~ ^%(/.*|$) ]]; then
            dir="$(git root)${dir#\%}"
        # handle '-' special "directory"
        elif [[ "${dir}" == "-" ]]; then
            dir="${OLDPWD}"
            printf "%s\n" "${dir}"
        fi
        # if file exists and is not a directory
        if [[ -e ${dir} && ! -d ${dir} ]]; then
            printf "'%s' is a file; cd-ing to parent directory\n" "${dir}"
            dir="$(dirname "${dir}")"
        # if file does not exist but the parent directory does
        elif [[ ! -e ${dir} && -d $(dirname "${dir}") ]]; then
            printf "'%s' does not exist; cd-ing to parent directory\n" "${dir}"
            dir="$(dirname "${dir}")"
        fi
        builtin cd "${dir}"
    fi
}

function clearall() {
    clear
    if [[ -n ${TMUX_PANE} ]]; then
        tmux clear-history
    fi
}

function gcp-group-membership() {
    if [[ ${#@} -lt 1 ]]; then
        printf '\nusage: gcp-group-membership <group_1> [group_2] ... [group_n]\n'
        return 1
    else
        for group in "$@"; do
            printf "\n%s\n%${#group}s\n" "${group}" " " | tr " " "-"
            gcloud identity groups memberships list --format='value(preferredMemberKey.id)' --group-email="${group}"
        done
    fi
}

function dockertags() {
    # >>> OLD CODE FOR V1 API
    #    if [ $# -lt 1 ]; then
    #        cat << HELP
    #dockertags  --  list all tags for a Docker image on a remote registry.
    #
    #EXAMPLE:
    #    - list all tags for ubuntu:
    #       dockertags ubuntu
    #
    #   - list all php tags containing apache:
    #      dockertags php apache
    #
    #HELP
    #    fi
    #
    #    image="$1"
    #    tags=$(wget -q https://registry.hub.docker.com/v1/repositories/${image}/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}')
    #
    #    if [ -n "$2" ]; then
    #        tags="$(echo "${tags}" | grep "$2")"
    #    fi
    #
    #    echo "${tags}"
    # <<< OLD CODE FOR V1 API

    # TODO fix this so it can get info from other image repos
    # TODO enable filtering

    # Gets all tags for a given docker image.

    # Dependencies: curl, jq

    # Examples:

    # retrieve all tags for a single library
    # docker-tags "library/redis"

    # retrieve all tags for multiple libraries
    # docker-tags "library/mongo" "library/redis"

    token_uri="https://auth.docker.io/token"
    list_uri="https://registry-1.docker.io/v2/###IMAGE###/tags/list"

    images=($@)

    scope=''
    for image in "${images[@]}"; do
            scope+="scope=repository:${image}:pull&"
    done

    token=$( curl -Ss "${token_uri}?service=registry.docker.io&${scope}" | jq -r .token )

    for image in "${images[@]}"; do
        this_uri=$( echo -n "${list_uri}" | sed -e "s^###IMAGE###^${image}^" )
        curl -Ss -H "Accept: application/json" -H "Authorization: Bearer $token" "${this_uri}" | jq .
    done
}

function git-merge-from() {
    [[ $# -lt 1 || $1 =~ -h|--help ]] && { printf "usage: git-merge-from <branch-name>\n"; return 1; }

    branch="${1:-"main"}"
    current_branch="$(git rev-parse --abbrev-ref HEAD)"

    if git branch --no-color 2>/dev/null | grep "^* ${branch}$" >/dev/null; then
        printf "can't merge from ${branch} to ${branch}!\n"
        return 2
    fi
    if [[ -z "${current_branch}" ]]; then
        printf "can't merge into non-existent branch!\n"
        return 3
    fi

    git fetch --tags --all --prune && \
        git checkout "${branch}" && \
        git pull && \
        git checkout - && \
        git merge "${branch}" -m "Merge branch '${branch}' into ${current_branch}"
}

function git-rebase-onto() {
    [[ $# -lt 1 || $1 =~ -h|--help ]] && { printf "usage: git-merge-from <branch-name>\n"; return 1; }

    branch="${1:-"main"}"

    if git branch --no-color 2>/dev/null | grep "^* ${branch}$" >/dev/null; then
        printf "can't rebase ${branch} onto ${branch}!\n"
        return 2
    fi

    git fetch --tags --all --prune && \
        git checkout "${branch}" && \
        git pull && \
        git checkout - && \
        git rebase "${branch}"
}

# grep that displays the first line (indended to be for a header) as well
# https://stackoverflow.com/a/9969881
function hgrep() {
    awk -v pattern="${1:?pattern is empty}" 'NR==1 || $0~pattern' "${2:-/dev/stdin}"
}

function ka() {
    kubectl $@ --all-namespaces
}

#kubectl current context (kcc)
function kcc() {
    if ! command -v pcre2grep &>/dev/null; then
        return 255
    fi

    local config="${KUBECONFIG:-"${HOME}/.kube/config"}"

    if [[ ! -r "${config}" ]]; then
        return 254
    fi

    local current_context_name="$(grep '^current-context: ' "${config}")"
    current_context_name="${current_context_name#*: }"

    if [[ "${current_context_name}" == \"\" ]]; then
        return 253
    fi

    local -a context_info=($(pcre2grep -M -o1 -o2 -- "- context:\s+(cluster: .*\s)\s+(namespace: .*){0,1}\s+user: .*\s+name: ${current_context_name}" "${config}"))
    local cluster="${context_info[1]}"
    local namespace="${context_info[3]:-"default"}"

    local format
    case "${context_info[1]}" in
        gke_*)  format="gke"      ;;
        arn:*)  format="eks"      ;;
        *)      format="generic"  ;;
    esac
    if [[ "$1" == "PS1" ]]; then
        KCC_PS1=true
    fi
    kcc-formatter "${format}" "${cluster}" "${namespace}"
}

function kcc-formatter() {
    if [[ $# -ne 3 ]]; then
        >&2 printf "kcc-formatter: invalid syntax\n"
        >&2 printf "usage: kcc-formatter <format> <cluster> <namespace>\n"
        return 1
    fi
    local format="$1"
    local cluster="$2"
    local namespace="$3"
    local KCC_PS1="${KCC_PS1:-false}"

    local TC='\e['
    local Rst="${TC}0m"
    local Red="${TC}31m"
    local Green="${TC}32m"
    local Blue="${TC}34m"

    local format_string
    local -a cluster_info

    case "${format}" in
        gke)
            IFS='_' read -r -a cluster_info <<<"${cluster}"
            local project="${cluster_info[1]}"
            local region="${cluster_info[2]}"
            local cluster_name="${cluster_info[3]}"
            if ${KCC_PS1:-false}; then
                format_string=" ${Rst}[${Green}%s/%s${Rst}:${Red}%s${Rst}]"
            else
                format_string="%s/%s:%s\n"
            fi
            printf "${format_string}" "${project}" "${cluster_name}" "${namespace}"
            ;;
        eks)
            IFS=':/' read -r -a cluster_info <<<"${cluster}"
            local account="${cluster_info[4]}"
            local region="${cluster_info[3]}"
            local cluster_name="${cluster_info[6]}"
            if [[ "${cluster_name}" =~ "${region}" ]]; then
                if ${KCC_PS1:-false}; then
                    format_string=" ${Rst}[${Green}%s/%s${Rst}:${Red}%s${Rst}]"
                else
                    format_string="%s/%s:%s\n"
                fi
                printf "${format_string}" "${account}" "${cluster_name}" "${namespace}"
            else
                if ${KCC_PS1:-false}; then
                    format_string=" ${Rst}[(${Blue}%s${Rst})${Green}%s/%s${Rst}:${Red}%s${Rst}]"
                else
                    format_string="(%s)%s/%s:%s\n"
                fi
                printf "${format_string}" "${region}" "${account}" "${cluster_name}" "${namespace}"
            fi
            ;;
        generic)
            if ${KCC_PS1:-false}; then
                format_string=" ${Rst}[${Green}%s${Rst}:${Red}%s${Rst}]"
            else
                format_string="%s:%s\n"
            fi
            printf "${format_string}" "${cluster}" "${namespace}"
            ;;
        *)
            >&2 printf "kcc-formatter: unknown format \"%s\"\n" "${format}"
            return 1
            ;;
    esac
    return 0
}

# WIP
function kubectl-get-all() {
    local context namespace namespaced_only all_namespaces
    local resources
    context="$(kubectx --current)"
    namespace="$(kubens --current)"
    all_namespaces=false
    while [[ "${1}" =~ -.* ]]; do
        case "${1}" in
            --)
                shift
                break
                ;;
#            --context*)
#                if [[ -n "$(echo "${1}" | awk -F'=' '{print $2}')" ]]; then
#                    context=
#                shift 2
#                ;;
#            -n | --namespace)
#                namespace="${2}"
#                shift 2
#                ;;
            --namespaced)
                namespaced=true
                shift
                ;;
            --not-namespaced)
                namespaced=false
                shift
                ;;
#            -a | --all-namespaces)
#                all_namespaces=true
#                shift
#                ;;
            *)
                break
                ;;
        esac
    done

    alias kubectl="kubectl --context=\"${context}\""

    if [[ -n "${namespaced}" ]]; then
        printf -v resources "%s," $({ kubectl api-resources --verbs=list --namespaced="${namespaced}" -o name; } | grep -ve "events.events.k8s.io" -ve "events" | sort -u)
    else
        printf -v resources "%s," $({ kubectl api-resources --verbs=list --namespaced=false -o name; kubectl api-resources --verbs=list --namespaced=true -o name; } | grep -ve "events.events.k8s.io" -ve "events" | sort -u)
    fi

    if ${all_namespaces}; then
        kubectl get --ignore-not-found --all-namespaces "${resources:: -1}" "${@}" | sed 's/^       /CLUSTER/'
    else
        kubectl --namespace "${namespace}" get --ignore-not-found "${resources:: -1}" "${@}"
    fi
}

# kubedf
# modified from https://gist.github.com/redmcg/60cfff7bca6f32969188008ad4a44c9a
function kubedf() (
    set -o errexit -o nounset -o pipefail

    NODESAPI=/api/v1/nodes

    function getNodes() {
        kubectl get --raw $NODESAPI | jq -r '.items[].metadata.name'
    }

    function getPVCs() {
        jq -s '[flatten | .[].pods[].volume[]? | select(has("pvcRef")) | {name: .pvcRef.name, capacityBytes, usedBytes, availableBytes, percentageUsed: (.usedBytes / .capacityBytes * 100)}] | sort_by(.name)'
    }

    function column() {
        awk '{ for (i = 1; i <= NF; i++) { d[NR, i] = $i; w[i] = length($i) > w[i] ? length($i) : w[i] } } END { for (i = 1; i <= NR; i++) { printf("%-*s", w[1], d[i, 1]); for (j = 2; j <= NF; j++ ) { printf("%*s", w[j] + 1, d[i, j]) } print "" } }'
    }

    function defaultFormat() {
        awk 'BEGIN { print "PVC 1K-blocks Used Available Use%" } {$2 = $2/1024; $3 = $3/1024; $4 = $4/1024; $5 = sprintf("%.0f%%",$5); print $0}'
    }

    function humanFormat() {
        awk 'BEGIN { print "PVC Size Used Avail Use%" } {$5 = sprintf("%.0f%%",$5); printf("%s ", $1); system(sprintf("numfmt --to=iec %s %s %s | sed '\''N;N;s/\\n/ /g'\'' | tr -d \\\\n", $2, $3, $4)); print " " $5 }'
    }

    function format() {
        jq -r '.[] | "\(.name) \(.capacityBytes) \(.usedBytes) \(.availableBytes) \(.percentageUsed)"' | $format | column
    }

    if [ "$1" == "-h" ]; then
        format=humanFormat
    else
        format=defaultFormat
    fi

    for node in $(getNodes); do
        kubectl get --raw $NODESAPI/$node/proxy/stats/summary
    done | getPVCs | format
)

# enable live grepping; useful for grepping things like "tail -f /var/log/messages"
# usage: just pipe into it
# example: tail -f /var/log/messages | livegrep -i " <server_name> "
function livegrep() {
    grep --line-buffered $* | cat
}

function myip() {
    local ip
    ip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
    if [[ -z "${ip}" ]]; then
        ip="$(curl -s ifconfig.me)"
    fi
    printf "%s\n" "${ip}"
}

function myupdate() {
    local pkg_mgr
    if command -v apt-get &>/dev/null; then
        pkg_update_cmd="sudo apt-get update && sudo apt-get dist-upgrade -y"
    elif command -v dnf &>/dev/null; then
        pkg_update_cmd="sudo dnf update -y"
    elif command -v yum &>/dev/null; then
        pkg_update_cmd="sudo yum update -y"
    else
        echo "unknown OS, please upgrade manually."
        return 1
    fi

    printf -- '-> gcloud --quiet components update <-\n'
    command -v gcloud >/dev/null && gcloud --quiet components update || printf -- '(gcloud command not found; skipping)\n'
    printf -- '----------\n'
    printf -- '-> ble-update <-\n'
    command -v ble-update >/dev/null && ble-update || printf -- '(ble-update command not found; skipping)\n'
    printf -- '----------\n'
    printf -- '-> %s <- \n' "${pkg_update_cmd}"
    eval "${pkg_update_cmd}"
}

# a better ls command
# https://www.topbug.net/blog/2016/11/28/a-better-ls-command/
if ls --color -d . >/dev/null 2>&1; then  # GNU ls
    unalias ls &>/dev/null
    export COLUMNS  # Remember columns for subprocesses.
    [[ "${TERM}" == "alacritty" ]] \
        && eval "$(TERM=xterm dircolors "${XDG_CONFIG_HOME}/bash/dircolors")" \
        || eval "$(dircolors "${XDG_CONFIG_HOME}/bash/dircolors")"
    function ls {
        command ls -F -h --color=always -v --author --time-style=long-iso -C "$@" | LESS="" less -R -X -F
    }
fi

function tf() {
    local tfswitch_bin

    if command -v tfswitch >/dev/null; then
        if ${IS_WSL}; then
            tfswitch_bin="PATH=\"\" \"${HOME}/.local/bin/tfswitch\""
        else
            tfswitch_bin="tfswitch"
        fi
        if ! eval "${tfswitch_bin}" -b "${HOME}/.local/bin/terraform"; then
            printf "\ntfswitch failed; attempting to run with existing terraform binary\n\n"
        else
            printf "\n"
        fi
    fi

    terraform "$@"
}

function tf-cleanse() {
    local changed_dir="false"

    if [[ $1 == "--repo" ]]; then
        changed_dir="true"
        cd %
    fi

    find . \( -name ".terraform" -type d -o -name ".terraform.lock.hcl" -type f \) -print0 | xargs -0 \rm -rf --

    ${changed_dir} && cd - >/dev/null
}

function tf-disable() {
    # Add ".disabled" suffix to passed terraform files (*.tf, *.tfvars)
    for file in $@; do
        [[ "${file}" =~ ^.*\.tf$ || "${file}" =~ ^.*\.tfvars$ ]] || continue
        mv -i "${file}" "${file}.disabled"
    done
}

function tf-docs() {
    if [[ ! -e "./backend.tf" ]]; then
        touch "./backend.tf"
    fi

    "${1:-"${HOME}/src/github.com/descarteslabs/devops/tools/terraform-docs/update-tf-docs"}" .

    if [[ -s "./backend.tf" ]]; then
        return
    else
        \rm -f "./backend.tf"
    fi
}

function tf-enable() {
    # Remove ".disabled" suffix from passed terraform files (*.tf, *.tfvars)
    for file in $@; do
        [[ "${file}" =~ ^.*\.tf.disabled$ || "${file}" =~ ^.*\.tfvars.disabled$ ]] || continue
        mv -i "${file}" "${file/%.disabled/}"
    done
}

function tf-init() {
    \rm -rf "./.terraform" && \rm -f "./.terraform.lock.hcl" && tf init "$@"
}

function tf-taint-module() {
    tf state list | grep -e "^module\.${1}" | grep -v "\.data\." | xargs -d '\n' -I '{}' -n 1 terraform taint '{}'
}

function tf-untaint-module() {
    tf state list | grep -e "^module\.${1}" | grep -v "\.data\." | xargs -d '\n' -I '{}' -n 1 terraform untaint '{}'
}

function tz_trimmed() {
    # Trim the basic date "%z" timezone string because FreeBSD doesn't have the "%:::z" format string
    tz=$(date +%z)
    if [[ "${tz:3}" == "00" ]]; then
        echo "${tz:0:3}"
    else
        echo "${tz}"
    fi
}
