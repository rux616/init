#!/usr/bin/env bash
# functions

# --------- #
# Functions #
# --------- #

# remember to use "builtin cd ..." to avoid infinite recursion (followed by a segfault)
function cd() {
    # if more than 1 argument (using options) or if `dirname` can't be found, dump right into cd
    if [[ ${#} -ne 1 || -z $(command -v dirname) ]]; then
        builtin cd "${@}"
    else
        local dir="${1}"
        # check if user wants to go up to git repo root
        if [[ ${dir} =~ ^%(/.*|$) ]]; then
            dir="$(git root)${dir#\%}"
        # handle '-' special "directory"
        elif [[ "${dir}" == "-" ]]; then
            dir="${OLDPWD}"
            printf "%s\n" "${dir}"
        fi
        # if file exists and is not a directory
        if [[ -e ${dir} && ! -d ${dir} ]]; then
            printf "'%s' is a file; cd-ing to parent directory\n" "${dir}"
            dir="$(dirname "${dir}")"
        # if file does not exist but the parent directory does
        elif [[ ! -e ${dir} && -d $(dirname "${dir}") ]]; then
            printf "'%s' does not exist; cd-ing to parent directory\n" "${dir}"
            dir="$(dirname "${dir}")"
        fi
        builtin cd "${dir}"
    fi
}

function clearall() {
    clear
    if [[ -n ${TMUX_PANE} ]]; then
        tmux clear-history
    fi
}

function gcp-group-membership() {
    if [[ ${#@} -lt 1 ]]; then
        printf '\nusage: gcp-group-membership <group_1> [group_2] ... [group_n]\n'
        return 1
    else
        for group in "$@"; do
            printf "\n%s\n%${#group}s\n" "${group}" " " | tr " " "-"
            gcloud identity groups memberships list --format='value(preferredMemberKey.id)' --group-email="${group}"
        done
    fi
}

function git-merge-from-master() {
    if git branch --no-color 2>/dev/null | grep '^* master$' >/dev/null; then
        printf "can't merge from master to master!\n"
        return 2
    fi
    git fetch --tags --all --prune && \
        git checkout master && \
        git pull && \
        git checkout - && \
        git merge master -m "merge from master"
}

function git-rebase-onto-master() {
    if git branch --no-color 2>/dev/null | grep '^* master$' >/dev/null; then
        printf "can't rebase master onto master!\n"
        return 2
    fi
    git fetch --tags --all --prune && \
        git checkout master && \
        git pull && \
        git checkout - && \
        git rebase master
}

function ka() {
    kubectl $@ --all-namespaces
}

function kube-current-gke() {
    if ! command -v pcre2grep &>/dev/null; then
        return 255
    fi

    local config=${KUBECONFIG:-"${HOME}/.kube/config"}

    if [[ ! -r "${config}" ]]; then
        return 254
    fi

    local current_context_name="$(grep '^current-context: ' "${config}")"
    current_context_name="${current_context_name#*: }"

    if [[ "${current_context_name}" == \"\" ]]; then
        return 253
    fi

    local -a context_info=($(pcre2grep -M -o1 -o2 -- "- context:\s+(cluster: .*\s)\s+(namespace: .*){0,1}\s+user: .*\s+name: ${current_context_name}" "${config}"))
    local current_cluster="${context_info[1]}"
    local current_namespace="${context_info[3]:-"default"}"

    if [[ "$1" == "PS1" ]]; then
        local TC='\e['
        local Rst="${TC}0m"
        local Red="${TC}31m"
        local Green="${TC}32m"
        local Blue="${TC}34m"
        printf " ${Rst}[${Green}%s/%s${Rst}:${Red}%s${Rst}]" $(awk -F '_' '{print $2,$4}' <<<"${current_cluster}") "${current_namespace}"
    else
        printf "%s/%s:%s\n" $(awk -F '_' '{print $2,$4}' <<<"${current_cluster}") "${current_namespace}"
    fi

    return 0
}

function kubectlgetall() {
    [[ $# -eq 1 ]] || { echo "must specify namespace"; return 1; }
    local resources
    printf -v resources "%s," $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq)
    kubectl -n "${1}" get --ignore-not-found "${resources:: -1}"
}

# enable live grepping; useful for grepping things like "tail -f /var/log/messages"
# usage: just pipe into it
# example: tail -f /var/log/messages | livegrep -i " <server_name> "
function livegrep() {
    grep --line-buffered $* | cat
}

function myupdate() {
    local pkg_mgr
    if command -v apt-get &>/dev/null; then
        pkg_update_cmd="sudo apt-get update && sudo apt-get dist-upgrade -y"
    elif command -v dnf &>/dev/null; then
        pkg_update_cmd="sudo dnf update -y"
    elif command -v yum &>/dev/null; then
        pkg_udpate_cmd="sudo yum update -y"
    else
        echo "unknown OS, please upgrade manually."
        return 1
    fi

    printf -- '-> gcloud --quiet components update <-\n'
    command -v gcloud >/dev/null && gcloud --quiet components update || printf -- '(gcloud command not found; skipping)'
    printf -- '----------\n'
    printf -- '-> ble-update <-\n'
    command -v ble-update >/dev/null && ble-update || printf -- '(ble-update command not found; skipping)'
    printf -- '----------\n'
    printf -- '-> %s <- \n' "${pkg_update_cmd}"
    eval "${pkg_update_cmd}"
}

# a better ls command
# https://www.topbug.net/blog/2016/11/28/a-better-ls-command/
if ls --color -d . >/dev/null 2>&1; then  # GNU ls
    unalias ls &>/dev/null
    export COLUMNS  # Remember columns for subprocesses.
    [[ "${TERM}" == "alacritty" ]] \
        && eval "$(TERM=xterm dircolors "${XDG_CONFIG_HOME}/bash/dircolors")" \
        || eval "$(dircolors "${XDG_CONFIG_HOME}/bash/dircolors")"
    function ls {
        command ls -F -h --color=always -v --author --time-style=long-iso -C "$@" | LESS="" less -R -X -F
    }
fi

function tf() {
    if command -v tfswitch >/dev/null; then
        if ! tfswitch -b "${HOME}/.local/bin/terraform"; then
            printf "\ntfswitch failed; attempting to run with existing terraform binary\n\n"
        else
            printf "\n"
        fi
    fi

    terraform "$@"
}

function tf-cleanse() {
    local changed_dir="false"

    if [[ $1 == "--repo" ]]; then
        changed_dir="true"
        cd %
    fi

    find . \( -name ".terraform" -type d -o -name ".terraform.lock.hcl" -type f \) -print0 | xargs -0 \rm -rf --

    ${changed_dir} && cd - >/dev/null
}

function tf-disable() {
    # Add ".disabled" suffix to passed terraform files (*.tf, *.tfvars)
    for file in $@; do
        [[ "${file}" =~ ^.*\.tf$ || "${file}" =~ ^.*\.tfvars$ ]] || continue
        mv -i "${file}" "${file}.disabled"
    done
}

function tf-docs() {
    if [[ ! -e "./backend.tf" ]]; then
        touch "./backend.tf"
    fi

    "${1:-"${HOME}/src/github.com/descarteslabs/devops/tools/terraform-docs/update-tf-docs"}" .

    if [[ -s "./backend.tf" ]]; then
        return
    else
        \rm -f "./backend.tf"
    fi
}

function tf-enable() {
    # Remove ".disabled" suffix from passed terraform files (*.tf, *.tfvars)
    for file in $@; do
        [[ "${file}" =~ ^.*\.tf.disabled$ || "${file}" =~ ^.*\.tfvars.disabled$ ]] || continue
        mv -i "${file}" "${file/%.disabled/}"
    done
}

function tf-init() {
    \rm -rf "./.terraform" && \rm -f "./.terraform.lock.hcl" && tf init
}

function tf-taint-module() {
    tf state list | grep -e "^module\.${1}" | grep -v "\.data\." | xargs -d '\n' -I '{}' -n 1 terraform taint '{}'
}

function tf-untaint-module() {
    tf state list | grep -e "^module\.${1}" | grep -v "\.data\." | xargs -d '\n' -I '{}' -n 1 terraform untaint '{}'
}

function tz_trimmed() {
    # Trim the basic date "%z" timezone string because FreeBSD doesn't have the "%:::z" format string
    tz=$(date +%z)
    if [[ "${tz:3}" == "00" ]]; then
        echo "${tz:0:3}"
    else
        echo "${tz}"
    fi
}
